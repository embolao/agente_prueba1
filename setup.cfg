# This file is used to configure your project.
# Read more about the various options under:
# https://setuptools.pypa.io/en/latest/userguide/declarative_config.html
# https://setuptools.pypa.io/en/latest/references/keywords.html

[metadata]
name = agente_prueba1
description = Un proyecto Python con configuración profesional para desarrollo de alta calidad
author = embolao
author_email = corneigh@gmail.com
license = MIT
license_files = LICENSE.txt
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8
url = https://github.com/tu-usuario/agente_prueba1
project_urls =
    Documentation = https://github.com/tu-usuario/agente_prueba1#readme
    Source = https://github.com/tu-usuario/agente_prueba1
    Tracker = https://github.com/tu-usuario/agente_prueba1/issues
    Changelog = https://github.com/tu-usuario/agente_prueba1/releases

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

classifiers =
    Development Status :: 3 - Alpha
    Intended Audience :: Developers
    License :: OSI Approved :: MIT License
    Natural Language :: Spanish
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Programming Language :: Python :: 3.12
    Programming Language :: Python :: Implementation :: CPython
    Programming Language :: Python :: Implementation :: PyPy
    Topic :: Software Development :: Libraries :: Python Modules
    Topic :: Software Development :: Quality Assurance
    Topic :: Software Development :: Testing
    Topic :: Utilities
    Typing :: Typed


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
python_requires = >=3.8

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    importlib-metadata; python_version<"3.8"
    numpy>=1.21.0
    scipy>=1.7.0
    pandas>=1.3.0
    scikit-learn>=1.0.0
    matplotlib>=3.4.0
    seaborn>=0.11.0
    torch>=2.0.0
    torchvision>=0.15.0
    torchaudio>=2.0.0
    tqdm>=4.65.0


[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Dependencias adicionales para características específicas
dev =
    # Formateo y calidad de código
    black>=23.12.1
    isort>=5.13.2
    flake8>=7.0.0
    flake8-bugbear>=24.2.6
    mypy>=1.8.0
    pre-commit>=3.6.0

    # Testing
    pytest>=8.0.0
    pytest-cov>=4.1.0
    pytest-mock>=3.12.0
    pytest-xdist>=3.5.0
    pytest-randomly>=3.15.0
    pytest-sugar>=1.0.0
    pytest-benchmark>=4.0.0

    # Documentación
    sphinx>=7.2.0
    sphinx-rtd-theme>=2.0.0
    sphinx-autodoc-typehints>=2.0.0
    sphinx-copybutton>=0.5.2
    myst-parser>=2.0.0

    # Utilidades de desarrollo
    ipython>=8.18.0
    ipdb>=0.13.13
    pip-tools>=7.3.0
    bump2version>=1.0.1
    safety>=2.3.5
    twine>=4.0.2
    wheel>=0.42.0

# Dependencias para testing
testing =
    pytest>=8.0.0
    pytest-cov>=4.1.0
    pytest-mock>=3.12.0
    pytest-xdist>=3.5.0
    pytest-randomly>=3.15.0
    pytest-sugar>=1.0.0
    pytest-benchmark>=4.0.0

# Dependencias para linting y formateo
lint =
    black>=23.12.1
    isort>=5.13.2
    flake8>=7.0.0
    flake8-bugbear>=24.2.6
    mypy>=1.8.0
    pre-commit>=3.6.0

# Dependencias para documentación
docs =
    sphinx>=7.2.0
    sphinx-rtd-theme>=2.0.0
    sphinx-autodoc-typehints>=2.0.0
    sphinx-copybutton>=0.5.2
    myst-parser>=2.0.0

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = agente_prueba1.module:function
# For example:
# console_scripts =
#     fibonacci = agente_prueba1.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov agente_prueba1 --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.6
package = agente_prueba1
extensions =
    github_actions
    no_skeleton
    no_tox
    pre_commit
